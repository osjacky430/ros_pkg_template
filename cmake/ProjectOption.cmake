include_guard()

include(StaticAnalyzers)
include(StandardProjectSetting)
include(CompilerCache)
include(Linker)
include(Sanitizers)
include(Optimization)
include(CompilerWarning)
include(Coverage)

function (configure_project_option)
  set(groups WARNINGS CPP_CHECK CLANG_TIDY VS_ANALYSIS LINKER COMPILER_CACHE SANITIZER)
  cmake_parse_arguments(GRP "" "" "${groups}" ${ARGN})

  cmake_parse_arguments(WARNING "" "TARGET;PROJECT_WARNINGS" "" "${GRP_WARNINGS}")
  cmake_parse_arguments(LINKER "" "TARGET;LINKER_NAME;LINKER_PATH" "" "${GRP_LINKER}")
  cmake_parse_arguments(CCACHE "" "CCACHE_BASE_DIR" "" "${GRP_COMPILER_CACHE}")
  cmake_parse_arguments(CPP_CHECK "" "" "SUPPRESS;EXTRA_OPTIONS" "${GRP_CPP_CHECK}")
  cmake_parse_arguments(CLANG_TIDY "" "" "EXTRA_ARG;EXTRA_OPTIONS" "${GRP_CLANG_TIDY}")
  cmake_parse_arguments(VS_ANALYSIS "" "" "RULE_SETS" "${GRP_VS_ANALYSIS}")
  cmake_parse_arguments(SANITIZER "" "TARGET" "" "${GRP_SANITIZER}")

  foreach (target_name ${WARNING_TARGET} ${LINKER_TARGET} ${SANITIZER_TARGET})
    if (NOT TARGET ${target_name})
      add_library(${target_name} INTERFACE)
    endif ()
  endforeach ()

  configure_project_setting()
  configure_compiler_cache()
  configure_project_warnings(TARGET ${WARNING_TARGET} WARNINGS ${WARNING_PROJECT_WARNINGS})
  configure_linker(TARGET ${LINKER_TARGET} LINKER_NAME ${LINKER_LINKER_NAME} LINKER_PATH ${LINKER_LINKER_PATH})
  configure_sanitizers(TARGET ${SANITIZER_TARGET})

  if (${ENABLE_IPO})
    configure_interprocedural_optimization()
  endif ()

  if (${ENABLE_CPP_CHECK})
    configure_cppcheck(SUPPRESS ${CPP_CHECK_SUPPRESS} EXTRA_OPTIONS ${CPP_CHECK_EXTRA_OPTIONS})
  endif ()

  if (${ENABLE_CLANG_TIDY})
    configure_clang_tidy(EXTRA_ARG ${CLANG_TIDY_EXRTA_ARGS} EXTRA_OPTIONS ${CLANG_TIDY_EXTRA_OPTIONS})
  endif ()

  if (${ENABLE_INCLUDE_WHAT_YOU_USE})
    configure_iwyu()
  endif ()

  if (CMAKE_GENERATOR MATCHES "Visual Studio" AND ${ENABLE_VS_ANALYSIS})
    configure_vs_analysis(RULE_SETS ${VS_ANALYSIS_RULE_SETS})
  endif ()
endfunction ()
